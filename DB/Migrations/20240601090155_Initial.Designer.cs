// <auto-generated />
using System;
using DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DB.Migrations
{
    [DbContext(typeof(AgricoreContext))]
    [Migration("20241022090155_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DB.Data.Models.AgriculturalProduction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float?>("CropProduction")
                        .HasColumnType("real");

                    b.Property<float?>("CultivatedArea")
                        .HasColumnType("real");

                    b.Property<long>("FarmId")
                        .HasColumnType("bigint");

                    b.Property<float?>("IrrigatedArea")
                        .HasColumnType("real");

                    b.Property<float?>("LandValue")
                        .HasColumnType("real");

                    b.Property<int>("OrganicProductionType")
                        .HasColumnType("integer");

                    b.Property<long?>("ProductGroupId")
                        .HasColumnType("bigint");

                    b.Property<float?>("QuantitySold")
                        .HasColumnType("real");

                    b.Property<float?>("QuantityUsed")
                        .HasColumnType("real");

                    b.Property<float?>("SellingPrice")
                        .HasColumnType("real");

                    b.Property<float?>("ValueSales")
                        .HasColumnType("real");

                    b.Property<float?>("VariableCosts")
                        .HasColumnType("real");

                    b.Property<long>("YearId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("YearId");

                    b.HasIndex("FarmId", "ProductGroupId", "YearId")
                        .IsUnique();

                    b.ToTable("AgriculturalProductions");
                });

            modelBuilder.Entity("DB.Data.Models.AgroManagementDecision", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("AgriculturalLandArea")
                        .HasColumnType("real");

                    b.Property<float>("AgriculturalLandValue")
                        .HasColumnType("real");

                    b.Property<float>("AverageLandValue")
                        .HasColumnType("real");

                    b.Property<long>("FarmId")
                        .HasColumnType("bigint");

                    b.Property<float>("LongAndMediumTermLoans")
                        .HasColumnType("real");

                    b.Property<bool>("RetireAndHandOver")
                        .HasColumnType("boolean");

                    b.Property<float>("TargetedLandAquisitionArea")
                        .HasColumnType("real");

                    b.Property<float>("TargetedLandAquisitionHectarPrice")
                        .HasColumnType("real");

                    b.Property<float>("TotalCurrentAssets")
                        .HasColumnType("real");

                    b.Property<long>("YearId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.HasIndex("FarmId", "YearId")
                        .IsUnique();

                    b.ToTable("AgroManagementDecisions");
                });

            modelBuilder.Entity("DB.Data.Models.ClosingValFarmValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("AgriculturalLandArea")
                        .HasColumnType("real");

                    b.Property<float>("AgriculturalLandValue")
                        .HasColumnType("real");

                    b.Property<float>("Depreciation")
                        .HasColumnType("real");

                    b.Property<float>("FarmBuildingsValue")
                        .HasColumnType("real");

                    b.Property<long>("FarmId")
                        .HasColumnType("bigint");

                    b.Property<float>("FarmNetIncome")
                        .HasColumnType("real");

                    b.Property<float>("FixedAssets")
                        .HasColumnType("real");

                    b.Property<float>("ForestLandArea")
                        .HasColumnType("real");

                    b.Property<float>("ForestLandValue")
                        .HasColumnType("real");

                    b.Property<float>("GrossFarmIncome")
                        .HasColumnType("real");

                    b.Property<float>("IntangibleAssetsNonTradable")
                        .HasColumnType("real");

                    b.Property<float>("IntangibleAssetsTradable")
                        .HasColumnType("real");

                    b.Property<float>("LandImprovements")
                        .HasColumnType("real");

                    b.Property<float>("LongAndMediumTermLoans")
                        .HasColumnType("real");

                    b.Property<float>("Machinery")
                        .HasColumnType("real");

                    b.Property<float>("MachineryAndEquipment")
                        .HasColumnType("real");

                    b.Property<float>("OtherNonCurrentAssets")
                        .HasColumnType("real");

                    b.Property<float>("OtherOutputs")
                        .HasColumnType("real");

                    b.Property<float>("PlantationsValue")
                        .HasColumnType("real");

                    b.Property<float>("RentBalance")
                        .HasColumnType("real");

                    b.Property<float>("SubsidiesOnInvestments")
                        .HasColumnType("real");

                    b.Property<float>("Taxes")
                        .HasColumnType("real");

                    b.Property<float>("TotalCurrentAssets")
                        .HasColumnType("real");

                    b.Property<float>("TotalExternalFactors")
                        .HasColumnType("real");

                    b.Property<float>("TotalIntermediateConsumption")
                        .HasColumnType("real");

                    b.Property<float>("TotalOutputCropsAndCropProduction")
                        .HasColumnType("real");

                    b.Property<float>("TotalOutputLivestockAndLivestockProduction")
                        .HasColumnType("real");

                    b.Property<float>("VATBalanceOnInvestments")
                        .HasColumnType("real");

                    b.Property<float>("VatBalanceExcludingInvestments")
                        .HasColumnType("real");

                    b.Property<long>("YearId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.HasIndex("FarmId", "YearId")
                        .IsUnique();

                    b.ToTable("ClosingValFarmValues");
                });

            modelBuilder.Entity("DB.Data.Models.FADNProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Arable")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FADNIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FADNIdentifier")
                        .IsUnique();

                    b.ToTable("FADNProducts");
                });

            modelBuilder.Entity("DB.Data.Models.FADNProductRelation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("FADNProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("PopulationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductGroupId")
                        .HasColumnType("bigint");

                    b.Property<float>("RepresentativenessArea")
                        .HasColumnType("real");

                    b.Property<float>("RepresentativenessOcurrence")
                        .HasColumnType("real");

                    b.Property<float>("RepresentativenessValue")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("FADNProductId");

                    b.HasIndex("PopulationId");

                    b.HasIndex("ProductGroupId", "FADNProductId", "PopulationId")
                        .IsUnique();

                    b.ToTable("FADNProductRelation");
                });

            modelBuilder.Entity("DB.Data.Models.Farm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Altitude")
                        .HasColumnType("integer");

                    b.Property<string>("FarmCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Lat")
                        .HasColumnType("bigint");

                    b.Property<long>("Long")
                        .HasColumnType("bigint");

                    b.Property<long>("PopulationId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegionLevel1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegionLevel1Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegionLevel2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegionLevel2Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RegionLevel3")
                        .HasColumnType("bigint");

                    b.Property<string>("RegionLevel3Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TechnicalEconomicOrientation")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PopulationId");

                    b.HasIndex("FarmCode", "PopulationId")
                        .IsUnique();

                    b.HasIndex("FarmCode", "PopulationId", "RegionLevel3")
                        .IsUnique();

                    b.ToTable("Farms");
                });

            modelBuilder.Entity("DB.Data.Models.FarmYearSubsidy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("FarmId")
                        .HasColumnType("bigint");

                    b.Property<long>("PolicyId")
                        .HasColumnType("bigint");

                    b.Property<float>("Value")
                        .HasColumnType("real")
                        .HasColumnName("VALUE");

                    b.Property<long>("YearId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PolicyId");

                    b.HasIndex("YearId");

                    b.HasIndex("FarmId", "YearId", "PolicyId")
                        .IsUnique();

                    b.ToTable("FarmYearSubsidies");
                });

            modelBuilder.Entity("DB.Data.Models.GreeningFarmYearData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("FarmId")
                        .HasColumnType("bigint");

                    b.Property<float>("GreeningSurface")
                        .HasColumnType("real");

                    b.Property<long>("YearId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.HasIndex("FarmId", "YearId")
                        .IsUnique();

                    b.ToTable("GreeningFarmYearData");
                });

            modelBuilder.Entity("DB.Data.Models.HolderFarmYearData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("FarmId")
                        .HasColumnType("bigint");

                    b.Property<int>("HolderAge")
                        .HasColumnType("integer");

                    b.Property<int>("HolderFamilyMembers")
                        .HasColumnType("integer");

                    b.Property<int>("HolderGender")
                        .HasColumnType("integer");

                    b.Property<long>("HolderSuccessors")
                        .HasColumnType("bigint");

                    b.Property<int>("HolderSuccessorsAge")
                        .HasColumnType("integer");

                    b.Property<long>("YearId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.HasIndex("FarmId", "YearId")
                        .IsUnique();

                    b.ToTable("HolderFarmYearData");
                });

            modelBuilder.Entity("DB.Data.Models.LandRent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DestinationFarmId")
                        .HasColumnType("bigint");

                    b.Property<long>("OriginFarmId")
                        .HasColumnType("bigint");

                    b.Property<float>("RentArea")
                        .HasColumnType("real");

                    b.Property<float>("RentValue")
                        .HasColumnType("real");

                    b.Property<long>("YearId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DestinationFarmId");

                    b.HasIndex("YearId");

                    b.HasIndex("OriginFarmId", "DestinationFarmId", "YearId")
                        .IsUnique();

                    b.ToTable("LandRents");
                });

            modelBuilder.Entity("DB.Data.Models.LandTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DestinationFarmId")
                        .HasColumnType("bigint");

                    b.Property<float>("Percentage")
                        .HasColumnType("real");

                    b.Property<long>("ProductionId")
                        .HasColumnType("bigint");

                    b.Property<float>("SalePrice")
                        .HasColumnType("real");

                    b.Property<long>("YearId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("YearId");

                    b.HasIndex("DestinationFarmId", "ProductionId", "YearId")
                        .IsUnique();

                    b.ToTable("LandTransactions");
                });

            modelBuilder.Entity("DB.Data.Models.LivestockProduction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DairyCows")
                        .HasColumnType("integer");

                    b.Property<float>("EggsProductionSold")
                        .HasColumnType("real");

                    b.Property<float>("EggsTotalProduction")
                        .HasColumnType("real");

                    b.Property<float>("EggsTotalSales")
                        .HasColumnType("real");

                    b.Property<long>("FarmId")
                        .HasColumnType("bigint");

                    b.Property<float>("ManureTotalSales")
                        .HasColumnType("real");

                    b.Property<float>("MilkProductionSold")
                        .HasColumnType("real");

                    b.Property<float>("MilkTotalProduction")
                        .HasColumnType("real");

                    b.Property<float>("MilkTotalSales")
                        .HasColumnType("real");

                    b.Property<float>("MilkVariableCosts")
                        .HasColumnType("real");

                    b.Property<int>("NumberAnimalsForSlaughtering")
                        .HasColumnType("integer");

                    b.Property<float>("NumberAnimalsRearingBreading")
                        .HasColumnType("real");

                    b.Property<float>("NumberOfAnimals")
                        .HasColumnType("real");

                    b.Property<int>("NumberOfAnimalsSold")
                        .HasColumnType("integer");

                    b.Property<long>("ProductGroupId")
                        .HasColumnType("bigint");

                    b.Property<float?>("SellingPrice")
                        .HasColumnType("real");

                    b.Property<float>("ValueAnimalsRearingBreading")
                        .HasColumnType("real");

                    b.Property<float>("ValueSlaughteredAnimals")
                        .HasColumnType("real");

                    b.Property<float>("ValueSoldAnimals")
                        .HasColumnType("real");

                    b.Property<float>("VariableCosts")
                        .HasColumnType("real");

                    b.Property<float>("WoolProductionSold")
                        .HasColumnType("real");

                    b.Property<float>("WoolTotalProduction")
                        .HasColumnType("real");

                    b.Property<long>("YearId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("YearId");

                    b.HasIndex("FarmId", "ProductGroupId", "YearId")
                        .IsUnique();

                    b.ToTable("LivestockProductions");
                });

            modelBuilder.Entity("DB.Data.Models.LogMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LogLevel")
                        .HasColumnType("integer");

                    b.Property<long>("SimulationRunId")
                        .HasColumnType("bigint");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SimulationRunId");

                    b.ToTable("LogMessage");
                });

            modelBuilder.Entity("DB.Data.Models.Policy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("EconomicCompensation")
                        .HasColumnType("real");

                    b.Property<int>("EndYearNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCoupled")
                        .HasColumnType("boolean");

                    b.Property<string>("ModelLabel")
                        .HasColumnType("text");

                    b.Property<string>("PolicyDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PolicyIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("PopulationId")
                        .HasColumnType("bigint");

                    b.Property<int>("StartYearNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PopulationId", "PolicyIdentifier")
                        .IsUnique();

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("DB.Data.Models.PolicyGroupRelation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("EconomicCompensation")
                        .HasColumnType("real");

                    b.Property<long>("PolicyId")
                        .HasColumnType("bigint");

                    b.Property<long>("PopulationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PolicyId");

                    b.HasIndex("PopulationId");

                    b.HasIndex("ProductGroupId", "PolicyId", "PopulationId")
                        .IsUnique();

                    b.ToTable("PolicyGroupRelation");
                });

            modelBuilder.Entity("DB.Data.Models.Population", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Populations");
                });

            modelBuilder.Entity("DB.Data.Models.ProductGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string[]>("ModelSpecificCategories")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Organic")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalNameDatasource")
                        .HasColumnType("text");

                    b.Property<long>("PopulationId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductType")
                        .HasColumnType("integer");

                    b.Property<string>("ProductsIncludedInOriginalDataset")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PopulationId");

                    b.HasIndex("Name", "PopulationId")
                        .IsUnique();

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("DB.Data.Models.SimulationRun", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CurrentStage")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentStageProgress")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentSubStageProgress")
                        .HasColumnType("integer");

                    b.Property<string>("CurrentSubstage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CurrentYear")
                        .HasColumnType("integer");

                    b.Property<int>("OverallStatus")
                        .HasColumnType("integer");

                    b.Property<long>("SimulationScenarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SimulationScenarioId")
                        .IsUnique();

                    b.ToTable("SimulationRun");
                });

            modelBuilder.Entity("DB.Data.Models.SimulationScenario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalPolicies")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool?>("Compress")
                        .HasColumnType("boolean");

                    b.Property<int>("Horizon")
                        .HasColumnType("integer");

                    b.Property<bool?>("IgnoreLMM")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IgnoreLP")
                        .HasColumnType("boolean");

                    b.Property<string>("LongTermModelBranch")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("PopulationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortTermModelBranch")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("YearId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PopulationId");

                    b.HasIndex("YearId");

                    b.ToTable("SimulationScenario");
                });

            modelBuilder.Entity("DB.Data.Models.SyntheticPopulation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("PopulationId")
                        .HasColumnType("bigint");

                    b.Property<long>("YearId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PopulationId");

                    b.HasIndex("YearId");

                    b.ToTable("SyntheticPopulation");
                });

            modelBuilder.Entity("DB.Data.Models.Year", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("PopulationId")
                        .HasColumnType("bigint");

                    b.Property<long>("YearNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PopulationId");

                    b.HasIndex("Id", "PopulationId")
                        .IsUnique();

                    b.HasIndex("YearNumber", "PopulationId")
                        .IsUnique();

                    b.ToTable("Years");
                });

            modelBuilder.Entity("DB.Data.Models.AgriculturalProduction", b =>
                {
                    b.HasOne("DB.Data.Models.Farm", "Farm")
                        .WithMany("AgriculturalProductions")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Data.Models.ProductGroup", "ProductGroup")
                        .WithMany()
                        .HasForeignKey("ProductGroupId");

                    b.HasOne("DB.Data.Models.Year", "Year")
                        .WithMany("AgriculturalProductions")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("ProductGroup");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("DB.Data.Models.AgroManagementDecision", b =>
                {
                    b.HasOne("DB.Data.Models.Farm", "Farm")
                        .WithMany("AgroManagementDecisions")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Data.Models.Year", "Year")
                        .WithMany("AgroManagementDecisions")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("DB.Data.Models.ClosingValFarmValue", b =>
                {
                    b.HasOne("DB.Data.Models.Farm", "Farm")
                        .WithMany("ClosingValFarmValues")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Data.Models.Year", "Year")
                        .WithMany()
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("DB.Data.Models.FADNProductRelation", b =>
                {
                    b.HasOne("DB.Data.Models.FADNProduct", "FADNProduct")
                        .WithMany("FADNProductRelations")
                        .HasForeignKey("FADNProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Data.Models.Population", "Population")
                        .WithMany("FADNProductRelations")
                        .HasForeignKey("PopulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Data.Models.ProductGroup", "ProductGroup")
                        .WithMany("FADNProductRelations")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FADNProduct");

                    b.Navigation("Population");

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("DB.Data.Models.Farm", b =>
                {
                    b.HasOne("DB.Data.Models.Population", "Population")
                        .WithMany("Farms")
                        .HasForeignKey("PopulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Population");
                });

            modelBuilder.Entity("DB.Data.Models.FarmYearSubsidy", b =>
                {
                    b.HasOne("DB.Data.Models.Farm", "Farm")
                        .WithMany("FarmYearSubsidies")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Data.Models.Policy", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Data.Models.Year", "Year")
                        .WithMany("FarmYearSubsidies")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("Policy");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("DB.Data.Models.GreeningFarmYearData", b =>
                {
                    b.HasOne("DB.Data.Models.Farm", "Farm")
                        .WithMany("GreeningFarmYearData")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Data.Models.Year", "Year")
                        .WithMany("GreeningFarmYearData")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("DB.Data.Models.HolderFarmYearData", b =>
                {
                    b.HasOne("DB.Data.Models.Farm", "Farm")
                        .WithMany("HoldersFarmYearData")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Data.Models.Year", "Year")
                        .WithMany("HoldersFarmYearData")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("DB.Data.Models.LandRent", b =>
                {
                    b.HasOne("DB.Data.Models.Farm", "DestinationFarm")
                        .WithMany("LandOutRents")
                        .HasForeignKey("DestinationFarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Data.Models.Farm", "OriginFarm")
                        .WithMany("LandInRents")
                        .HasForeignKey("OriginFarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Data.Models.Year", "Year")
                        .WithMany("LandRents")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationFarm");

                    b.Navigation("OriginFarm");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("DB.Data.Models.LandTransaction", b =>
                {
                    b.HasOne("DB.Data.Models.Farm", "DestinationFarm")
                        .WithMany("LandTransactions")
                        .HasForeignKey("DestinationFarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Data.Models.AgriculturalProduction", "Production")
                        .WithOne("LandTransaction")
                        .HasForeignKey("DB.Data.Models.LandTransaction", "ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Data.Models.Year", "Year")
                        .WithMany("LandTransactions")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationFarm");

                    b.Navigation("Production");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("DB.Data.Models.LivestockProduction", b =>
                {
                    b.HasOne("DB.Data.Models.Farm", "Farm")
                        .WithMany("LivestockProductions")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Data.Models.ProductGroup", "ProductGroup")
                        .WithMany()
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Data.Models.Year", "Year")
                        .WithMany("LivestockProductions")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("ProductGroup");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("DB.Data.Models.LogMessage", b =>
                {
                    b.HasOne("DB.Data.Models.SimulationRun", "SimulationRun")
                        .WithMany("LogMessages")
                        .HasForeignKey("SimulationRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SimulationRun");
                });

            modelBuilder.Entity("DB.Data.Models.Policy", b =>
                {
                    b.HasOne("DB.Data.Models.Population", "Population")
                        .WithMany("Policies")
                        .HasForeignKey("PopulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Population");
                });

            modelBuilder.Entity("DB.Data.Models.PolicyGroupRelation", b =>
                {
                    b.HasOne("DB.Data.Models.Policy", "Policy")
                        .WithMany("PolicyGroupRelations")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Data.Models.Population", "Population")
                        .WithMany("PolicyGroupRelations")
                        .HasForeignKey("PopulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Data.Models.ProductGroup", "ProductGroup")
                        .WithMany("PolicyGroupRelations")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policy");

                    b.Navigation("Population");

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("DB.Data.Models.ProductGroup", b =>
                {
                    b.HasOne("DB.Data.Models.Population", "Population")
                        .WithMany("ProductGroups")
                        .HasForeignKey("PopulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Population");
                });

            modelBuilder.Entity("DB.Data.Models.SimulationRun", b =>
                {
                    b.HasOne("DB.Data.Models.SimulationScenario", "SimulationScenario")
                        .WithOne("SimulationRun")
                        .HasForeignKey("DB.Data.Models.SimulationRun", "SimulationScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SimulationScenario");
                });

            modelBuilder.Entity("DB.Data.Models.SimulationScenario", b =>
                {
                    b.HasOne("DB.Data.Models.Population", "Population")
                        .WithMany("SimulationScenarios")
                        .HasForeignKey("PopulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Data.Models.Year", "Year")
                        .WithMany("SimulationScenarios")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Population");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("DB.Data.Models.SyntheticPopulation", b =>
                {
                    b.HasOne("DB.Data.Models.Population", "Population")
                        .WithMany("SyntheticPopulations")
                        .HasForeignKey("PopulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Data.Models.Year", "Year")
                        .WithMany("SyntheticPopulations")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Population");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("DB.Data.Models.Year", b =>
                {
                    b.HasOne("DB.Data.Models.Population", "Population")
                        .WithMany("Years")
                        .HasForeignKey("PopulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Population");
                });

            modelBuilder.Entity("DB.Data.Models.AgriculturalProduction", b =>
                {
                    b.Navigation("LandTransaction");
                });

            modelBuilder.Entity("DB.Data.Models.FADNProduct", b =>
                {
                    b.Navigation("FADNProductRelations");
                });

            modelBuilder.Entity("DB.Data.Models.Farm", b =>
                {
                    b.Navigation("AgriculturalProductions");

                    b.Navigation("AgroManagementDecisions");

                    b.Navigation("ClosingValFarmValues");

                    b.Navigation("FarmYearSubsidies");

                    b.Navigation("GreeningFarmYearData");

                    b.Navigation("HoldersFarmYearData");

                    b.Navigation("LandInRents");

                    b.Navigation("LandOutRents");

                    b.Navigation("LandTransactions");

                    b.Navigation("LivestockProductions");
                });

            modelBuilder.Entity("DB.Data.Models.Policy", b =>
                {
                    b.Navigation("PolicyGroupRelations");
                });

            modelBuilder.Entity("DB.Data.Models.Population", b =>
                {
                    b.Navigation("FADNProductRelations");

                    b.Navigation("Farms");

                    b.Navigation("Policies");

                    b.Navigation("PolicyGroupRelations");

                    b.Navigation("ProductGroups");

                    b.Navigation("SimulationScenarios");

                    b.Navigation("SyntheticPopulations");

                    b.Navigation("Years");
                });

            modelBuilder.Entity("DB.Data.Models.ProductGroup", b =>
                {
                    b.Navigation("FADNProductRelations");

                    b.Navigation("PolicyGroupRelations");
                });

            modelBuilder.Entity("DB.Data.Models.SimulationRun", b =>
                {
                    b.Navigation("LogMessages");
                });

            modelBuilder.Entity("DB.Data.Models.SimulationScenario", b =>
                {
                    b.Navigation("SimulationRun");
                });

            modelBuilder.Entity("DB.Data.Models.Year", b =>
                {
                    b.Navigation("AgriculturalProductions");

                    b.Navigation("AgroManagementDecisions");

                    b.Navigation("FarmYearSubsidies");

                    b.Navigation("GreeningFarmYearData");

                    b.Navigation("HoldersFarmYearData");

                    b.Navigation("LandRents");

                    b.Navigation("LandTransactions");

                    b.Navigation("LivestockProductions");

                    b.Navigation("SimulationScenarios");

                    b.Navigation("SyntheticPopulations");
                });
#pragma warning restore 612, 618
        }
    }
}
